services:

  caddy:
    image: caddy:2.10.2-alpine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - gatewayapi
    volumes:
      - ./Caddyfile.dev:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - ticket-booking-network

  mysql:
    image: mysql:8.4.6
    container_name: mysql
    restart: always
    env_file:
      - .env
    ports:
      - 3306:3306
    volumes:
      - ./infrastructure/mysql/init-db-user.sh:/docker-entrypoint-initdb.d/init-db-user.sh
      - db-data:/var/lib/mysql
    networks:
      - ticket-booking-network

  react:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    image: react
    container_name: react
    ports: # for development
      - 5173:5173
    environment:
      - PUBLIC_URL=/
      - VITE_API_BASE_URL=${VITE_API_BASE_URL_DEV}
    networks:
      - ticket-booking-network
    volumes:
      - node_modules:/app/node_modules # to avoid overwriting node_modules
      - ./frontend:/app
      
  catalog-service:
    build:
      context: ./backend
      dockerfile: catalog-service/Dockerfile.dev
    image: catalog-service
    container_name: catalog-service
    working_dir: /app/catalog-service
    expose: [8080]
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - mysql
    environment:
      SERVER_PORT: "8080"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_CATALOG}
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: "kafka-broker:29092"
    volumes:
      - ./backend:/app
      - ${HOME}/.m2:/root/.m2
    networks:
      - ticket-booking-network

  cart-service:
    build:
      context: ./backend
      dockerfile: cart-service/Dockerfile.dev
    image: cart-service
    container_name: cart-service
    working_dir: /app/cart-service
    expose: [8081]
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - redis
    environment:
      SERVER_PORT: "8081"
      CATALOG_BASE_URL: "catalog-service:8080"
      KAFKA_BOOTSTRAP_SERVERS: "kafka-broker:29092"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./backend:/app
      - ${HOME}/.m2:/root/.m2
    networks:
      - ticket-booking-network

  order-service:
    build:
      context: ./backend
      dockerfile: order-service/Dockerfile.dev
    image: order-service
    container_name: order-service
    working_dir: /app/order-service
    expose: [8082]
    command: ["mvn", "spring-boot:run"]
    depends_on:
      - mysql
    environment:
      SERVER_PORT: "8082"
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL_ORDER}
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: "kafka-broker:29092"
    volumes:
      - ./backend:/app
      - ${HOME}/.m2:/root/.m2
    networks:
      - ticket-booking-network

  gatewayapi:
    build:
      context: ./backend
      dockerfile: gatewayapi/Dockerfile.dev
    image: gatewayapi
    container_name: gatewayapi
    working_dir: /app/gatewayapi
    expose: [8000]
    command: ["mvn", "spring-boot:run"]
    environment:
      SERVER_PORT: "8000"
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      CATALOG_BASE_URL: "catalog-service:8080"
      CART_BASE_URL: "cart-service:8081"
      ORDER_BASE_URL: "order-service:8082"
    volumes:
      - ./backend:/app
      - ${HOME}/.m2:/root/.m2
    networks:
      - ticket-booking-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.3
    hostname: zookeeper
    container_name: zookeeper
    expose: [2181]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    networks:
      - ticket-booking-network

  kafka-broker:
    image: confluentinc/cp-kafka:7.9.3
    container_name: kafka-broker
    hostname: kafka-broker
    expose: [29092]
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_LOG4J_LOGGERS: 'kafka=WARN,kafka.controller=WARN,kafka.log.LogCleaner=WARN,state.change.logger=WARN,kafka.producer.async.DefaultEventHandler=WARN,o.a.kafka.common.utils.AppInfoParser=WARN'
    networks:
      - ticket-booking-network

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.9.3
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    depends_on:
      - kafka-broker
    expose: [8081]
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://kafka-schema-registry:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: WARN
    networks:
      - ticket-booking-network

  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - "8084:8080"
  #   depends_on:
  #     - kafka-broker
  #   environment:
  #     KAFKA_CLUSTERS_NAME: local
  #     KAFKA_CLUSTERS_BOOTSTRAPSERVERS: kafka-broker:29092
  #     DYNAMIC_CONFIG_ENABLED: 'true'
  #     LOG_LEVEL: WARN
  #     LOGGING_LEVEL_ROOT: WARN
  #     SPRING_LOG_LEVEL: WARN
  #   networks:
  #     - ticket-booking-network

  redis:
    image: redis:8.2.1-alpine
    container_name: redis
    expose: [6379]
    networks:
      - ticket-booking-network
      
networks:
  ticket-booking-network:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
  db-data:
  node_modules:
